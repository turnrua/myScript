using System;
using System.Linq;
using System.Numerics;
using System.Threading;
using Newtonsoft.Json;
using KodakkuAssist.Script;
using KodakkuAssist.Module.GameEvent;
using KodakkuAssist.Module.Draw;

namespace PVP舞者提示;
{
    [ScriptType(guid: "70D33E2C-8080-4055-ACC3-29C91CF673A0", name: "PVP舞者提示", territorys: [], version: "0.0.0.8", author: "chris")]
    public class 舞者提示Class
    {
        [ScriptMethod(name: "舞者LB", eventType: EventTypeEnum.StartCasting, eventCondition: ["ActionId:29430"])]
        public void SlitheringStrike(Event @event, ScriptAccessory accessory)
        {
            var dp = accessory.Data.GetDefaultDrawProperties();
            dp.Name = "舞者LB";
            dp.Color = accessory.Data.DefaultDangerColor;
            dp.DestoryAt = 1000;
            dp.Position = @event.EffectPosition();
            dp.Scale = new Vector2(15);
            accessory.Method.SendDraw(0, DrawTypeEnum.Circle, dp);
        }
    }

    public static class EventExtensions
    {
        private static bool ParseHexId(string? idStr, out uint id)
        {
            id = 0;
            if (string.IsNullOrEmpty(idStr)) return false;
            try
            {
                var idStr2 = idStr.Replace("0x", "");
                id = uint.Parse(idStr2, System.Globalization.NumberStyles.HexNumber);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public static uint Id(this Event @event)
        {
            return JsonConvert.DeserializeObject<uint>(@event["Id"]);
        }

        public static uint ActionId(this Event @event)
        {
            return JsonConvert.DeserializeObject<uint>(@event["ActionId"]);
        }

        public static uint SourceId(this Event @event)
        {
            return ParseHexId(@event["SourceId"], out var id) ? id : 0;
        }

        public static uint TargetId(this Event @event)
        {
            return ParseHexId(@event["TargetId"], out var id) ? id : 0;
        }

        public static Vector3 EffectPosition(this Event @event)
        {
            return JsonConvert.DeserializeObject<Vector3>(@event["EffectPosition"]);
        }
    }
} // <- 命名空间闭合
